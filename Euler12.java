/* ************************************************************************
   * Name: David Johnson
   * Date: 11/20/15
   * Version: 1.0
   * Purpose of program (quoted from projecteuler.net):
   * The sequence of triangle numbers is generated by adding the natural
   *   numbers. So the 7th triangle number would be
   *   		1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
   * 
   * The first ten terms would be:
   * 	1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
   * 
   * Let us list the factors of the first seven triangle numbers:
   * 1: 1
   * 3: 1,3
   * 6: 1,2,3,6
   * 10: 1,2,5,10
   * 15: 1,3,5,15
   * 21: 1,3,7,21
   * 28: 1,2,4,7,14,28
   * 
   * We can see that 28 is the first triangle number to have over
   *   five divisors.
   *   
   * What is the value of the first triangle number to have over
   *   five hundred divisors?
   *   
   * Solution for this one was found at:
   * 	http://www.mathblog.dk/triangle-number-with-more-than-500-divisors/
   * 
   * My solution started with a large number and checked if it had more than
   * 500 divisors. If so, the number was cut in half and checked again, if
   * that number was less than 500 divisors, then the number was multiplied
   * by 1.5 accounting for odd numbers.  This solution turned out to be
   * incredibly slow and I chose to use and study the solution below instead.
   * 
   * The key to the solution below is that for every integer, x, that is a
   * divisor of num up to sqrt(num), there exists another integer <= num, y,
   * that is also a divisor of num such that x*y = num. Hence, for every
   * divisor you find, you add 2 to nod (number of divisors).
   * *********************************************************************** */

package projecteuler;

public class Euler12 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		long num = 28; //6 divisors
		long next = 8;
		
		while (numOfDivisors(num) < 500)
		{
			num += next;
			next++;
		}
		
		System.out.println("The first triangle number to have over 500 " +
						   "divisors is: " + num);
	}
	
	
	/* *********************************************************************
	 * @param  num	The number to check for divisors
	 * @return		The number of divisors for num.
	 * ********************************************************************* */
	public static int numOfDivisors(long num)
	{
		int nod = 0;
	    int sqrt = (int) Math.sqrt(num);
	 
	    for (int i = 1; i <= sqrt; i++)
	    {
	        if (num % i == 0)
	            nod += 2;
	    }
	    
	    //Correction if the number is a perfect square
	    if (sqrt * sqrt == num)
	    {
	        nod--;
	    }
	 
	    return nod;
	}
}
